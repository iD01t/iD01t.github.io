name: Build ebook pages

on:
  push:
    branches: [ main ]                 # change if your default branch differs
    paths:
      - "data/ebooks.json"
      - "templates/**"
      - "scripts/**"
      - "ebook.html"
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install jinja2
          fi

      - name: Find & run build_ebook_pages.py
        env:
          SITE_ORIGIN: "https://id01t.store"
        shell: bash
        run: |
          set -euo pipefail
          echo "Workspace: $GITHUB_WORKSPACE"
          CANDIDATES=(
            "scripts/build_ebook_pages.py"
            "build_ebook_pages.py"
            "site/scripts/build_ebook_pages.py"
            "website/scripts/build_ebook_pages.py"
            "tools/build_ebook_pages.py"
          )
          FOUND=""
          for c in "${CANDIDATES[@]}"; do
            if [[ -f "$c" ]]; then
              echo "Found builder at: $c"
              python "$c"
              FOUND="yes"
              break
            fi
          done
          if [[ -z "$FOUND" ]]; then
            echo "::error title=Missing build script::Could not find build_ebook_pages.py in repository."
            echo "Searched:"
            printf ' - %s\n' "${CANDIDATES[@]}"
            echo "Nearest matches in tree:"
            find . -maxdepth 3 -type f \( -name "build*_pages.py" -o -name "*ebook*.py" \) -print || true
            exit 1
          fi

      - name: Stage files for GitHub Pages
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p docs/ebooks
          shopt -s nullglob
          for f in ebooks/*.html; do
            cp -v "$f" docs/ebooks/
          done
          [[ -f ebook.html ]] && cp -v ebook.html docs/

      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
